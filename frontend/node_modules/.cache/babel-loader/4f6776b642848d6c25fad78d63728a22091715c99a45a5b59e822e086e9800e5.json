{"ast":null,"code":"var _jsxFileName = \"/Users/devronins/inotebook-1/frontend/src/context/notes/notestate.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport NoteContext from \"./notecontext\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  let location = useLocation();\n  const navigate = useNavigate();\n  const [Id, setId] = useState();\n  const [progress, setProgress] = useState(0);\n  const [reason, setReason] = useState();\n  const [alert, setAlert] = useState(null);\n  const [auth, setAuth] = useState();\n  const [note, setnote] = useState([]);\n  const host = \"http://localhost:4000\";\n  const showAlert = (type, message) => {\n    setAlert({\n      type,\n      message\n    });\n    if (type === \"success\") {\n      setTimeout(() => {\n        setAlert(null);\n      }, 3000);\n    }\n  };\n  // function to get notes\n  const getNotes = async () => {\n    try {\n      setProgress(20);\n      const response = await fetch(`${host}/inotebook/notes`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        }\n      });\n      setProgress(50);\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to fetch notes\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      setProgress(70);\n      const json = await response.json();\n      setnote(json);\n      // showAlert(\"success\",\"Notes fetched\");\n      setProgress(100);\n    } catch (error) {\n      showAlert(\"danger\", \"Internal server error\");\n    }\n  };\n  // function to add note in database\n  const addNote = async (title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/addnote`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag\n        })\n      });\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to get notes\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      console.log(json);\n      showAlert(\"success\", \"Note added successfully\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"danger\", \"Internal server error\");\n    }\n  };\n\n  //function to update note from database\n  const updateNote = async (id, title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/updatenote/${id}`, {\n        method: \"put\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag\n        })\n      });\n      if (!response.ok) {\n        showAlert(\"Danger\", \"Unable to add the note\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      showAlert(\"success\", \"note updated successfully\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"Danger\", \"Internal server error\");\n    }\n  }; //pending\n\n  //function to delete note from database\n  const deleteNote = async id => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/deletenote/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        }\n      });\n      if (!response.ok) {\n        showAlert(\"Danger\", \"Unable to delete the note\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      getNotes();\n      showAlert(\"success\", \"note deleted successfully\");\n      navigate(\"/\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"Danger\", \"Internal server error\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      location,\n      getNotes,\n      note,\n      Id,\n      setId,\n      addNote,\n      updateNote,\n      deleteNote,\n      auth,\n      reason,\n      progress,\n      setProgress,\n      alert,\n      showAlert\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"PqdMljdROdST1scryuKkL1YJJ3Q=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","NoteContext","useLocation","useNavigate","jsxDEV","_jsxDEV","NoteState","props","_s","location","navigate","Id","setId","progress","setProgress","reason","setReason","alert","setAlert","auth","setAuth","note","setnote","host","showAlert","type","message","setTimeout","getNotes","response","fetch","method","headers","ok","Error","status","json","error","addNote","title","description","tag","body","JSON","stringify","console","log","updateNote","id","deleteNote","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/devronins/inotebook-1/frontend/src/context/notes/notestate.js"],"sourcesContent":["import { useState } from \"react\";\nimport NoteContext from \"./notecontext\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nconst NoteState = (props) => {\n  let location = useLocation();\n  const navigate = useNavigate();\n  const [Id, setId] = useState();\n  const [progress, setProgress] = useState(0);\n  const [reason, setReason] = useState();\n  const [alert, setAlert] = useState(null);\n  const [auth,setAuth]=useState()\n  const [note, setnote] = useState([]);\n  const host = \"http://localhost:4000\";\n  const showAlert = (type, message) => {\n    setAlert({ type, message });\n    if (type === \"success\") {\n      setTimeout(() => {\n        setAlert(null);\n      }, 3000);\n    }\n  };\n  // function to get notes\n  const getNotes = async () => {\n    try {\n      setProgress(20);\n      const response = await fetch(`${host}/inotebook/notes`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n      });\n      setProgress(50);\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to fetch notes\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      setProgress(70);\n      const json = await response.json();\n      setnote(json);\n      // showAlert(\"success\",\"Notes fetched\");\n      setProgress(100);\n    } catch (error) {\n      showAlert(\"danger\", \"Internal server error\");\n    }\n  };\n  // function to add note in database\n  const addNote = async (title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/addnote`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n        body: JSON.stringify({ title, description, tag }),\n      });\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to get notes\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      console.log(json);\n      showAlert(\"success\", \"Note added successfully\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"danger\", \"Internal server error\");\n    }\n  };\n\n  //function to update note from database\n  const updateNote = async (id, title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/updatenote/${id}`, {\n        method: \"put\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n        body: JSON.stringify({ title, description, tag }),\n      });\n      if (!response.ok) {\n        showAlert(\"Danger\", \"Unable to add the note\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      showAlert(\"success\", \"note updated successfully\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"Danger\", \"Internal server error\");\n    }\n  }; //pending\n\n  //function to delete note from database\n  const deleteNote = async (id) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/deletenote/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n      });\n      if (!response.ok) {\n        showAlert(\"Danger\", \"Unable to delete the note\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      getNotes();\n      showAlert(\"success\",\"note deleted successfully\");\n      navigate(\"/\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"Danger\", \"Internal server error\");\n    }\n  };\n  return (\n    <NoteContext.Provider\n      value={{\n        location,\n        getNotes,\n        note,\n        Id,\n        setId,\n        addNote,\n        updateNote,\n        deleteNote,\n        auth,\n        reason,\n        progress,\n        setProgress,\n        alert,\n        showAlert,\n      }}\n    >\n      {props.children}\n    </NoteContext.Provider>\n  );\n};\n\nexport default NoteState;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}