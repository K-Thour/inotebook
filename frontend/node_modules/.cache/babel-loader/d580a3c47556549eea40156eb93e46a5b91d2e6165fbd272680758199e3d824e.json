{"ast":null,"code":"var _jsxFileName = \"/Users/devronins/inotebook-1/frontend/src/context/notes/notestate.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport NoteContext from \"./notecontext\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  let location = useLocation();\n  const navigate = useNavigate();\n  const [Id, setId] = useState();\n  const [progress, setProgress] = useState(0);\n  const [reason, setReason] = useState();\n  const [alert, setAlert] = useState(null);\n  const [auth, setAuth] = useState(false);\n  const [note, setnote] = useState([]);\n  let user;\n  const host = \"http://localhost:4000\";\n  const showAlert = (type, message) => {\n    setAlert({\n      type,\n      message\n    });\n    if (type === \"success\") {\n      setTimeout(() => {\n        setAlert(null);\n      }, 3000);\n    }\n  };\n  const welcome = () => {\n    setTimeout(() => {\n      showAlert(\"success\", `Welcome ${user.name}`);\n    }, 3000);\n  };\n  // function to register\n\n  const register = async (name, email, password) => {\n    try {\n      const response = await fetch(`${host}/inotebook/user/create`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(name, email, password)\n      });\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to register\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      console.log(json);\n      if (json.success) {\n        showAlert(\"warning\", \"User registered successfully\");\n        setAuth(json.authtoken);\n        navigate(\"/\");\n      } else {\n        showAlert(\"success\", json.message);\n      }\n    } catch (error) {\n      console.error(error);\n      showAlert(\"danger\", error.message);\n    }\n  };\n\n  // function to log in\n  const Login = async (email, password) => {\n    try {\n      const response = await fetch(`${host}/inotebook/user/login`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(email, password)\n      });\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to Login\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      if (json.success) {\n        setAuth(json.authtoken);\n        showAlert(\"success\", \"User Login successfully\");\n        console.log(auth);\n        navigate(\"/\");\n      } else {\n        showAlert(\"warning\", json.reason);\n      }\n    } catch (error) {\n      console.error(error);\n      showAlert(\"danger\", error.message);\n    }\n  };\n  // function to get user\n\n  const getuser = async () => {\n    try {\n      const response = await fetch(`${host}/inotebook/user/getuser`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        }\n      });\n      if (!response.ok) {\n        // showAlert(\"danger\", \"Unable to get a user\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      user = {\n        name: json.user.name,\n        email: json.user.email\n      };\n      console.log(user);\n    } catch (error) {\n      console.error(error);\n      // showAlert(\"danger\", error.message);\n    }\n  };\n\n  // function to get notes\n  const getNotes = async () => {\n    try {\n      setProgress(20);\n      const response = await fetch(`${host}/inotebook/notes`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth || \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiNjc5Zjc0MmQ2YTdjOTYwYzUyODMxZDk1IiwiaWF0IjoxNzM4NTEzMjk0fQ.PmUMAz02MgxLedWTqpuA17SlfhYRx2XTG5_gKbJw3Zo\"\n        }\n      });\n      setProgress(50);\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to fetch notes\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      setProgress(70);\n      const json = await response.json();\n      setnote(json);\n      // showAlert(\"success\",\"Notes fetched\");\n      setProgress(100);\n    } catch (error) {\n      showAlert(\"danger\", \"Internal server error\");\n    }\n  };\n  // function to add note in database\n  const addNote = async (title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/addnote`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag\n        })\n      });\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to get notes\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      getNotes();\n      showAlert(\"success\", \"Note added successfully\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"danger\", \"Internal server error\");\n    }\n  };\n\n  //function to update note from database\n  const updateNote = async (id, title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/updatenote/${id}`, {\n        method: \"put\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag\n        })\n      });\n      if (!response.ok) {\n        showAlert(\"Danger\", \"Unable to add the note\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      showAlert(\"success\", \"note updated successfully\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"Danger\", \"Internal server error\");\n    }\n  }; //pending\n\n  //function to delete note from database\n  const deleteNote = async id => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/deletenote/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        }\n      });\n      if (!response.ok) {\n        showAlert(\"Danger\", \"Unable to delete the note\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      getNotes();\n      showAlert(\"success\", \"note deleted successfully\");\n      navigate(\"/\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"Danger\", \"Internal server error\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      location,\n      getNotes,\n      note,\n      Id,\n      setId,\n      addNote,\n      updateNote,\n      deleteNote,\n      auth,\n      reason,\n      progress,\n      setProgress,\n      alert,\n      showAlert,\n      Login,\n      register,\n      getuser,\n      welcome,\n      user\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"cD1PvlTZd0TIEy7lUEP3XAttNEU=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","NoteContext","useLocation","useNavigate","jsxDEV","_jsxDEV","NoteState","props","_s","location","navigate","Id","setId","progress","setProgress","reason","setReason","alert","setAlert","auth","setAuth","note","setnote","user","host","showAlert","type","message","setTimeout","welcome","name","register","email","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","console","log","success","authtoken","error","Login","getuser","getNotes","addNote","title","description","tag","updateNote","id","deleteNote","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/devronins/inotebook-1/frontend/src/context/notes/notestate.js"],"sourcesContent":["import { useState } from \"react\";\nimport NoteContext from \"./notecontext\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nconst NoteState = (props) => {\n  let location = useLocation();\n  const navigate = useNavigate();\n  const [Id, setId] = useState();\n  const [progress, setProgress] = useState(0);\n  const [reason, setReason] = useState();\n  const [alert, setAlert] = useState(null);\n  const [auth, setAuth] = useState(false);\n  const [note, setnote] = useState([ ]);\n  let user;\n  const host = \"http://localhost:4000\";\n  const showAlert = (type, message) => {\n    setAlert({ type, message });\n    if (type === \"success\") {\n      setTimeout(() => {\n        setAlert(null);\n      }, 3000);\n    }\n  };\n  const welcome = () => {\n    setTimeout(() => {\n      showAlert(\"success\", `Welcome ${user.name}`);\n    }, 3000);\n  };\n  // function to register\n\n  const register = async (name, email, password) => {\n    try {\n      const response = await fetch(`${host}/inotebook/user/create`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(name, email, password),\n      });\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to register\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      console.log(json);\n      if (json.success) {\n        showAlert(\"warning\", \"User registered successfully\");\n        setAuth(json.authtoken);\n        navigate(\"/\");\n      } else {\n        showAlert(\"success\", json.message);\n      }\n    } catch (error) {\n      console.error(error);\n      showAlert(\"danger\", error.message);\n    }\n  };\n\n  // function to log in\n  const Login = async (email, password) => {\n    try {\n      const response = await fetch(`${host}/inotebook/user/login`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(email, password),\n      });\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to Login\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      if (json.success) {\n        setAuth(json.authtoken);\n        showAlert(\"success\", \"User Login successfully\");\n        console.log(auth);\n        navigate(\"/\");\n      } else {\n        showAlert(\"warning\", json.reason);\n      }\n    } catch (error) {\n      console.error(error);\n      showAlert(\"danger\", error.message);\n    }\n  };\n  // function to get user\n\n  const getuser=async()=>{\n    try {\n      const response = await fetch(`${host}/inotebook/user/getuser`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n      });\n      if (!response.ok) {\n        // showAlert(\"danger\", \"Unable to get a user\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json=await response.json();\n      user={\n        name:json.user.name,\n        email:json.user.email\n      }\n      console.log(user);\n    } catch (error) {\n      console.error(error);\n      // showAlert(\"danger\", error.message);\n    }\n  }\n\n  // function to get notes\n  const getNotes = async () => {\n    try {\n      setProgress(20);\n      const response = await fetch(`${host}/inotebook/notes`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth||\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiNjc5Zjc0MmQ2YTdjOTYwYzUyODMxZDk1IiwiaWF0IjoxNzM4NTEzMjk0fQ.PmUMAz02MgxLedWTqpuA17SlfhYRx2XTG5_gKbJw3Zo\",\n        },\n      });\n      setProgress(50);\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to fetch notes\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      setProgress(70);\n      const json = await response.json();\n      setnote(json);\n      // showAlert(\"success\",\"Notes fetched\");\n      setProgress(100);\n    } catch (error) {\n      showAlert(\"danger\", \"Internal server error\");\n    }\n  };\n  // function to add note in database\n  const addNote = async (title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/addnote`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n        body: JSON.stringify({ title, description, tag }),\n      });\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to get notes\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      getNotes();\n      showAlert(\"success\", \"Note added successfully\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"danger\", \"Internal server error\");\n    }\n  };\n\n  //function to update note from database\n  const updateNote = async (id, title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/updatenote/${id}`, {\n        method: \"put\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n        body: JSON.stringify({ title, description, tag }),\n      });\n      if (!response.ok) {\n        showAlert(\"Danger\", \"Unable to add the note\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      showAlert(\"success\", \"note updated successfully\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"Danger\", \"Internal server error\");\n    }\n  }; //pending\n\n  //function to delete note from database\n  const deleteNote = async (id) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/deletenote/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n      });\n      if (!response.ok) {\n        showAlert(\"Danger\", \"Unable to delete the note\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      getNotes();\n      showAlert(\"success\", \"note deleted successfully\");\n      navigate(\"/\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"Danger\", \"Internal server error\");\n    }\n  };\n  return (\n    <NoteContext.Provider\n      value={{\n        location,\n        getNotes,\n        note,\n        Id,\n        setId,\n        addNote,\n        updateNote,\n        deleteNote,\n        auth,\n        reason,\n        progress,\n        setProgress,\n        alert,\n        showAlert,\n        Login,\n        register,\n        getuser,\n        welcome,\n        user\n      }}\n    >\n      {props.children}\n    </NoteContext.Provider>\n  );\n};\n\nexport default NoteState;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}