{"ast":null,"code":"var _jsxFileName = \"/Users/devronins/inotebook-1/frontend/src/context/notes/notestate.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport NoteContext from \"./notecontext\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  let location = useLocation();\n  const navigate = useNavigate();\n  const [Id, setId] = useState();\n  const [progress, setProgress] = useState(0);\n  const [reason, setReason] = useState();\n  const [alert, setAlert] = useState(null);\n  let auth = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiNjc5Zjc0MmQ2YTdjOTYwYzUyODMxZDk1IiwiaWF0IjoxNzM4NTEzMjk0fQ.PmUMAz02MgxLedWTqpuA17SlfhYRx2XTG5_gKbJw3Zo\";\n  const [note, setnote] = useState([]);\n  const host = \"http://localhost:4000\";\n  const showAlert = (type, message) => {\n    setAlert({\n      type,\n      message\n    });\n    if (type === \"success\") {\n      setTimeout(() => {\n        setAlert(null);\n      }, 3000);\n    }\n  };\n  // function to register\n\n  const register = async (name, email, password) => {\n    console.log(name);\n    try {\n      const response = await fetch(`${host}/inotebook/user/create`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(name, email, password)\n      });\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to register\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      console.log(json);\n      if (json.success) {\n        showAlert(\"Success\", \"user registered successfully\");\n      } else {\n        showAlert(\"warning\", json.messa);\n      }\n    } catch (error) {\n      console.error(error);\n      showAlert(\"danger\", error.message);\n    }\n  };\n\n  // function to log in\n  const Login = async (email, password) => {\n    try {\n      const response = await fetch(`${host}/inotebook/user/login`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(email, password)\n      });\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to Login\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      if (json.success) {\n        auth = json.authtoken;\n        showAlert(\"success\", \"User Login successfully\");\n        navigate(\"/\");\n      } else {\n        showAlert(\"warning\", json.reason);\n      }\n    } catch (error) {\n      console.error(error);\n      showAlert(\"danger\", error.message);\n    }\n  };\n  // function to get notes\n  const getNotes = async () => {\n    try {\n      setProgress(20);\n      const response = await fetch(`${host}/inotebook/notes`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        }\n      });\n      setProgress(50);\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to fetch notes\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      setProgress(70);\n      const json = await response.json();\n      setnote(json);\n      // showAlert(\"success\",\"Notes fetched\");\n      setProgress(100);\n    } catch (error) {\n      showAlert(\"danger\", \"Internal server error\");\n    }\n  };\n  // function to add note in database\n  const addNote = async (title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/addnote`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag\n        })\n      });\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to get notes\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      console.log(json);\n      showAlert(\"success\", \"Note added successfully\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"danger\", \"Internal server error\");\n    }\n  };\n\n  //function to update note from database\n  const updateNote = async (id, title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/updatenote/${id}`, {\n        method: \"put\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag\n        })\n      });\n      if (!response.ok) {\n        showAlert(\"Danger\", \"Unable to add the note\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      showAlert(\"success\", \"note updated successfully\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"Danger\", \"Internal server error\");\n    }\n  }; //pending\n\n  //function to delete note from database\n  const deleteNote = async id => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/deletenote/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        }\n      });\n      if (!response.ok) {\n        showAlert(\"Danger\", \"Unable to delete the note\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      getNotes();\n      showAlert(\"success\", \"note deleted successfully\");\n      navigate(\"/\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"Danger\", \"Internal server error\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      location,\n      getNotes,\n      note,\n      Id,\n      setId,\n      addNote,\n      updateNote,\n      deleteNote,\n      auth,\n      reason,\n      progress,\n      setProgress,\n      alert,\n      showAlert,\n      Login,\n      register\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"e8hr+5NnFajlxfkDlxGlXS8RUiM=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","NoteContext","useLocation","useNavigate","jsxDEV","_jsxDEV","NoteState","props","_s","location","navigate","Id","setId","progress","setProgress","reason","setReason","alert","setAlert","auth","note","setnote","host","showAlert","type","message","setTimeout","register","name","email","password","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","success","messa","error","Login","authtoken","getNotes","addNote","title","description","tag","updateNote","id","deleteNote","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/devronins/inotebook-1/frontend/src/context/notes/notestate.js"],"sourcesContent":["import { useState } from \"react\";\nimport NoteContext from \"./notecontext\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nconst NoteState = (props) => {\n  let location = useLocation();\n  const navigate = useNavigate();\n  const [Id, setId] = useState();\n  const [progress, setProgress] = useState(0);\n  const [reason, setReason] = useState();\n  const [alert, setAlert] = useState(null);\n  let auth =\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiNjc5Zjc0MmQ2YTdjOTYwYzUyODMxZDk1IiwiaWF0IjoxNzM4NTEzMjk0fQ.PmUMAz02MgxLedWTqpuA17SlfhYRx2XTG5_gKbJw3Zo\";\n  const [note, setnote] = useState([]);\n  const host = \"http://localhost:4000\";\n  const showAlert = (type, message) => {\n    setAlert({ type, message });\n    if (type === \"success\") {\n      setTimeout(() => {\n        setAlert(null);\n      }, 3000);\n    }\n  };\n  // function to register\n\n  const register=async(name,email,password)=>{\n    console.log(name);\n    try {\n      const response = await fetch(`${host}/inotebook/user/create`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify( name,email, password ),\n      });\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to register\");\n        throw new Error(`Response status: ${response.status}`);\n      } \n      const json=await response.json();\n      console.log(json);\n      if(json.success){\n        showAlert(\"Success\",\"user registered successfully\");\n      }else{\n        showAlert(\"warning\",json.messa);\n      }\n    } catch (error) {\n        console.error(error);\n        showAlert(\"danger\",error.message );\n      }\n  }\n\n  // function to log in\n  const Login = async (email, password) => {\n    try {\n      const response = await fetch(`${host}/inotebook/user/login`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify( email, password ),\n      });\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to Login\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      if(json.success){\n        auth=json.authtoken;\n        showAlert(\"success\", \"User Login successfully\");\n        navigate(\"/\");\n      }else{\n        showAlert(\"warning\",json.reason)\n      }\n    } catch (error) {\n      console.error(error);\n      showAlert(\"danger\",error.message );\n    }\n  };\n  // function to get notes\n  const getNotes = async () => {\n    try {\n      setProgress(20);\n      const response = await fetch(`${host}/inotebook/notes`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n      });\n      setProgress(50);\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to fetch notes\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      setProgress(70);\n      const json = await response.json();\n      setnote(json);\n      // showAlert(\"success\",\"Notes fetched\");\n      setProgress(100);\n    } catch (error) {\n      showAlert(\"danger\", \"Internal server error\");\n    }\n  };\n  // function to add note in database\n  const addNote = async (title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/addnote`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n        body: JSON.stringify({ title, description, tag }),\n      });\n      if (!response.ok) {\n        showAlert(\"danger\", \"Unable to get notes\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      console.log(json);\n      showAlert(\"success\", \"Note added successfully\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"danger\", \"Internal server error\");\n    }\n  };\n\n  //function to update note from database\n  const updateNote = async (id, title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/updatenote/${id}`, {\n        method: \"put\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n        body: JSON.stringify({ title, description, tag }),\n      });\n      if (!response.ok) {\n        showAlert(\"Danger\", \"Unable to add the note\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      showAlert(\"success\", \"note updated successfully\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"Danger\", \"Internal server error\");\n    }\n  }; //pending\n\n  //function to delete note from database\n  const deleteNote = async (id) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/deletenote/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n      });\n      if (!response.ok) {\n        showAlert(\"Danger\", \"Unable to delete the note\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      getNotes();\n      showAlert(\"success\", \"note deleted successfully\");\n      navigate(\"/\");\n    } catch (error) {\n      console.error(error.message);\n      showAlert(\"Danger\", \"Internal server error\");\n    }\n  };\n  return (\n    <NoteContext.Provider\n      value={{\n        location,\n        getNotes,\n        note,\n        Id,\n        setId,\n        addNote,\n        updateNote,\n        deleteNote,\n        auth,\n        reason,\n        progress,\n        setProgress,\n        alert,\n        showAlert,\n        Login,\n        register\n      }}\n    >\n      {props.children}\n    </NoteContext.Provider>\n  );\n};\n\nexport default NoteState;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}