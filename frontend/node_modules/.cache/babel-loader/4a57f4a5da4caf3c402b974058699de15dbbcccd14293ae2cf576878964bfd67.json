{"ast":null,"code":"var _jsxFileName = \"/Users/devronins/inotebook-1/frontend/src/context/notes/notestate.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport NoteContext from \"./notecontext\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  let location = useLocation();\n  const navigate = useNavigate();\n  const [Id, setId] = useState();\n  const [progress, setProgress] = useState(0);\n  const [reason, setReason] = useState();\n  const [alert, setAlert] = useState(null);\n  let auth = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiNjc5Zjc0MmQ2YTdjOTYwYzUyODMxZDk1IiwiaWF0IjoxNzM4NTEzMjk0fQ.PmUMAz02MgxLedWTqpuA17SlfhYRx2XTG5_gKbJw3Zo\";\n  const [note, setnote] = useState([]);\n  const host = \"http://localhost:4000\";\n  const showAlert = (type, message) => {\n    setAlert({\n      type,\n      message\n    });\n    if (type === \"success\") {\n      setTimeout(() => {\n        setAlert(null);\n      }, 2000);\n    }\n  };\n  // function to get notes\n  const getNotes = async () => {\n    try {\n      setProgress(20);\n      const response = await fetch(`${host}/inotebook/notes`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        }\n      });\n      setProgress(50);\n      if (!response.ok) {\n        throw new Error(`Response status: ${response.status}`);\n        showAlert(\"danger\", \"Unable to fetch notes\");\n      }\n      setProgress(70);\n      const json = await response.json();\n      setnote(json);\n      showAlert(\"success\", \"Notes fetched\");\n      setProgress(90);\n      return true;\n    } catch (error) {\n      setProgress(90);\n      showAlert(\"danger\", \"Internal server error\");\n    }\n  };\n  // function to add note in database\n  const addNote = async (title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/addnote`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag\n        })\n      });\n      if (!response.ok) {\n        setAlert(\"danger\", \"Unable to get notes\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      console.log(json);\n      setAlert(\"success\", \"Note added successfully\");\n    } catch (error) {\n      console.error(error.message);\n      setAlert(\"danger\", \"Internal server error\");\n    }\n  };\n\n  //function to update note from database\n  const updateNote = async (id, title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/updatenote/${id}`, {\n        method: \"put\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag\n        })\n      });\n      if (!response.ok) {\n        setAlert(\"Danger\", \"Unable to add the note\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      setAlert(\"success\", \"note updated successfully\");\n    } catch (error) {\n      console.error(error.message);\n      setAlert(\"Danger\", \"Internal server error\");\n    }\n  }; //pending\n\n  //function to delete note from database\n  const deleteNote = async id => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/deletenote/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth\n        }\n      });\n      if (!response.ok) {\n        setAlert(\"Danger\", \"Unable to delete the note\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      setAlert(\"Success\", \"\");\n      getNotes();\n      navigate(\"/\");\n    } catch (error) {\n      console.error(error.message);\n      setAlert(\"Danger\", \"Internal server error\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      location,\n      getNotes,\n      note,\n      Id,\n      setId,\n      addNote,\n      updateNote,\n      deleteNote,\n      auth,\n      reason,\n      progress,\n      setProgress,\n      alert,\n      showAlert\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"e8hr+5NnFajlxfkDlxGlXS8RUiM=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","NoteContext","useLocation","useNavigate","jsxDEV","_jsxDEV","NoteState","props","_s","location","navigate","Id","setId","progress","setProgress","reason","setReason","alert","setAlert","auth","note","setnote","host","showAlert","type","message","setTimeout","getNotes","response","fetch","method","headers","ok","Error","status","json","error","addNote","title","description","tag","body","JSON","stringify","console","log","updateNote","id","deleteNote","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/devronins/inotebook-1/frontend/src/context/notes/notestate.js"],"sourcesContent":["import { useState } from \"react\";\nimport NoteContext from \"./notecontext\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nconst NoteState = (props) => {\n  let location = useLocation();\n  const navigate = useNavigate();\n  const [Id, setId] = useState();\n  const [progress, setProgress] = useState(0);\n  const [reason, setReason] = useState();\n  const [alert, setAlert] = useState(null);\n  let auth =\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiNjc5Zjc0MmQ2YTdjOTYwYzUyODMxZDk1IiwiaWF0IjoxNzM4NTEzMjk0fQ.PmUMAz02MgxLedWTqpuA17SlfhYRx2XTG5_gKbJw3Zo\";\n  const [note, setnote] = useState([]);\n  const host = \"http://localhost:4000\";\n  const showAlert = (type, message) => {\n    setAlert({ type, message });\n    if(type===\"success\"){\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);}\n  };\n  // function to get notes\n  const getNotes = async () => {\n    try {\n      setProgress(20);\n      const response = await fetch(`${host}/inotebook/notes`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n      });\n      setProgress(50);\n      if (!response.ok) {\n        throw new Error(`Response status: ${response.status}`);\n        showAlert(\"danger\",\"Unable to fetch notes\")\n      }\n      setProgress(70);\n      const json = await response.json();\n      setnote(json);\n      showAlert(\"success\",\"Notes fetched\");\n      setProgress(90);\n      return true;\n    } catch (error) {\n      setProgress(90);\n      showAlert(\"danger\",\"Internal server error\");\n    }\n  };\n  // function to add note in database\n  const addNote = async (title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/addnote`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n        body: JSON.stringify({ title, description, tag }),\n      });\n      if (!response.ok) {\n        setAlert(\"danger\",\"Unable to get notes\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      console.log(json);\n      setAlert(\"success\",\"Note added successfully\");\n    } catch (error) {\n      console.error(error.message);\n      setAlert(\"danger\",\"Internal server error\");\n    }\n  };\n\n  //function to update note from database\n  const updateNote = async (id, title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/updatenote/${id}`, {\n        method: \"put\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n        body: JSON.stringify({ title, description, tag }),\n      });\n      if (!response.ok) {\n        setAlert(\"Danger\",\"Unable to add the note\");\n        throw new Error(`Response status: ${response.status}`);\n        \n      }\n      setAlert(\"success\",\"note updated successfully\");\n    } catch (error) {\n      console.error(error.message);\n      setAlert(\"Danger\",\"Internal server error\");\n    }\n  }; //pending\n\n  //function to delete note from database\n  const deleteNote = async (id) => {\n    try {\n      const response = await fetch(`${host}/inotebook/notes/deletenote/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": auth,\n        },\n      });\n      if (!response.ok) {\n        setAlert(\"Danger\",\"Unable to delete the note\");\n        throw new Error(`Response status: ${response.status}`);\n      }\n      setAlert(\"Success\",\"\");\n      getNotes();\n      navigate(\"/\");\n    } catch (error) {\n      console.error(error.message);\n      setAlert(\"Danger\",\"Internal server error\");\n    }\n  };\n  return (\n    <NoteContext.Provider\n      value={{\n        location,\n        getNotes,\n        note,\n        Id,\n        setId,\n        addNote,\n        updateNote,\n        deleteNote,\n        auth,\n        reason,\n        progress,\n        setProgress,\n        alert,\n        showAlert,\n      }}\n    >\n      {props.children}\n    </NoteContext.Provider>\n  );\n};\n\nexport default NoteState;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}